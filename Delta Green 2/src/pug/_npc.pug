
mixin betterbutton_npc(rollName,titleButton,classButton='pressable',flag=false)
	.buttonwrapper
		button.roll.two(type='action' class=classes name='attr_'+rollName+'_r' value='@{'+rollName+'_action}') 	
			span.title
				if (flag)
					h3.aligned-left(data-i18n=key data-i18n-title=titleButton)= titleButton
						span.nbsp :
						span(name='attr_'+rollName+'_name')
				else
					h3.aligned-left(data-i18n=key data-i18n-title=titleButton)= titleButton
			span.para(name='attr_'+rollName)
			

mixin editablebetterbutton_npc_rep(rollName,classButton='pressable')
	.buttonwrapper 
		button.repeating_roll.two(type='action' class=classes name='attr_'+rollName+'_r' value='@{'+rollName+'_action}')
			span.title
				h3.aligned-left
					span(name='attr_name')
			span.para(name='attr_rank')
		


.npc


	.grid_npc.div.name-and-description.border
		.header
			h1.grid__item_last(data-i18n="name and description") name and description
		.inner-grid.inner-main
			.grid__item_last.colheader
				h2(data-i18n="name:") name:
			.grid__item_last
				input(data-i18n-placeholder='character name' name='attr_character_name' placeholder='Character name' title='@{name}' type='text')
			.grid__item_last.colheader.align_top
				h2(data-i18n="description:") description:
			.grid__item_last.align_top 
				textarea(name='attr_npc_description' placeholder='description' title='@{npc_description}')
	.grid_npc.sources-of-information.border
		.header 
			h1.grid__item_last(data-i18n="sources of information") sources of information
		.right-grid
				textarea.area(style="height:15rem;" name='attr_npc_sources' data-i18n-placeholder='sources of information' placeholder='sources of information')
	
	.grid_npc.stat-data.border
		.header.stat-grid 
			button.link.roll(type='action' name='attr_strength_r')
				h1.grid__item STR 
			button.link.roll(type='action' name='attr_constitution_r')
				h1.grid__item CON 
			button.link.roll(type='action' name='attr_dexterity_r')
				h1.grid__item DEX 
			button.link.roll(type='action' name='attr_intelligence_r')
				h1.grid__item INT 
			button.link.roll(type='action' name='attr_power_r')
				h1.grid__item POW 
			button.link.roll(type='action' name='attr_charisma_r')
				h1.grid__item CHA 
			h1.grid__item HP 
			h1.grid__item_last WP
			button.link.roll(type='action' name='attr_sanity_points_r')
				h1.grid__item SAN 
			h1.grid__item BP 
		.inner-main.stat-grid
			.grid__item
				input(data-i18n-placeholder='0' name='attr_strength_score' placeholder='-' title='@{STR}' type='text')
			.grid__item
				input(data-i18n-placeholder='0' name='attr_constitution_score' placeholder='-' title='@{CON}' type='text')
			.grid__item
				input(data-i18n-placeholder='0' name='attr_dexterity_score' placeholder='-' title='@{DEX}' type='text')
			.grid__item
				input(data-i18n-placeholder='0' name='attr_intelligence_score' placeholder='-' title='@{INT}' type='text')
			.grid__item
				input(data-i18n-placeholder='0' name='attr_power_score' placeholder='-' title='@{POW}' type='text')
			.grid__item
				input(data-i18n-placeholder='0' name='attr_charisma_score' placeholder='-' title='@{CHA}' type='text')
			.grid__item
				input(data-i18n-placeholder='0' name='attr_hit_points' placeholder='-' title='@{HP}' type='text' )
				span /
				span(style='width:40%' name='attr_hit_points_max')
			.grid__item
				input(data-i18n-placeholder='0' name='attr_willpower_points' placeholder='-' title='@{WP}' type='text' )
				span /
				span(style='width:40%' name='attr_willpower_points_max')
			.grid__item
				input(data-i18n-placeholder='0' name='attr_sanity_points' placeholder='-' title='@{WP}' type='text' )
				span /
				span(style='width:40%' name='attr_sanity_points_max')
			.grid__item_last
				input(data-i18n-placeholder='0' name='attr_breaking_point' placeholder='-' title='@{WP}' type='text' )
				span /
				span(style='width:40%' name='attr_breaking_point_max')
	
	.grid_npc.armor-skills-abilities-other.border
		.header
			h1(data-i18n="armor, skills,abilities, and other notes") "armor, skills,abilities, and other notes
		.inner-main
			h2.colon(data-i18n='skills') skills
			h3.formatted(data-i18n='general') general
			.skill-summary-container 
				each val, key in skills1
					+npcskill(val, key,true)
				each val, key in skills2
					+npcskill(val, key,true)
				each val, key in skills3
					+npcskill(val, key,true)
				+npcskill(0, 'unnatural',true)
			h3.formatted(data-i18n='extra') extra

			.skill-summary-repeat
				fieldset.repeating_skills
					.buttonwrapper_rep
						+editablebetterbutton_npc_rep('skill','pressable additional_div')

			details.arrow
				summary.allskills(data-i18n='all skills') all skills 
				.skill-container
					each val, key in skills1
						.section-skill-col
							+npcskill(val, key,false)
					each val, key in skills2
						.section-skill-col
							+npcskill(val, key,false)
					each val, key in skills3
						.section-skill-col
							+npcskill(val, key,false)
					.section-skill-col
						+npcskill(0, 'unnatural',false)
					.section-repeating-container
						.section-title.border-bottom
							h3.margin-left(data-i18n='foriegn languages and other skills:' data-i18n-title='foriegn languages and other skills:') foriegn languages and other skills:	
						.section-body
							fieldset.repeating_skills
								.section-skill-col
									.form-skill-group 
										label.skill-button
											input(type='hidden' class='edit_test' name='attr_test')
											span.edit_text
												input(style='width:100%;'  name='attr_name' title='@{repeating_skills_${x}__name}' type='text' value='skill' )
											span.unedit_text
												- const rskillrollName = `skill`;
												+editablebetterbutton_rep(rskillrollName,'','pressable additional_div',`(${val}%)`,true)
					
										label.switch-edit
											input(type='checkbox' name='attr_test' value='editable')
											span.vslider
									label.rank(data-i18n-title='skill rank' title='skill rank' )
										input(data-i18n-placeholder='0' name='attr_rank' title='@{repeating_skills_${x}_rank}' placeholder='0' type='text' value='')
			

	//.grid
		.section-header
			label(data-i18n-title='enter a name for non-player character' title='enter a name for non-player character')
				input(data-i18n-placeholder='character name' name='attr_name' placeholder='Character name' title='@{name}' type='text' value='')
		.grid.section-body
			label.row(data-i18n-title='enter npc description' title='enter npc description')
				textarea(name='attr_npc_description' placeholder='description' title='@{npc_description}' value='')
			each val, key in stat-dataObject
				//without modifiers - const statRollValue = `@{gm_toggle} &{template:stat-data} {{header=^{${key}}}} {{subheader=@{${key}}}} {{dice=[[1d100]]}} {{stat=[[@{${key+'_score'}}]]}} {{score=[[@{${key}}]]}}`;
				- const statRollValue = `@{gm_toggle} &{template:stat-data} {{header=^{${key}}}} {{subheader=@{${key}}}} {{dice=[[1d100]]}}  {{modifier=[[?{Modifier|,0|+20%,20|+40%,40|-20%,-20|-40%,-40|custom (%),?{custom (%)}}]]}} {{stat=[[@{${key+'_score'}}+round(?{Modifier|,0|+20%,20|+40%,40|-20%,-20|-40%,-40|custom (%),?{custom (%)}})]]}} {{score=[[@{${key}}+?{Modifier|,0|+20%,20|+40%,40|-20%,-20|-40%,-40|custom (%),?{custom (%)}}]]}}`;
				button(name=key data-i18n-title=key + ' roll' title=key + ' roll' type='roll' value!=statRollValue)
					h1.align-left(data-i18n=val)=val
				if (val === 'POW' || val === 'STR' || val === 'CON' )
					label(data-i18n-title=key + ' score' title=key + ' score')
						input.text-align-left.short( min=0 name='attr_' + key + '_score'  style='width:40%' placeholder='-' title='@{' + key + '_score' + '}' type='number' value=' ') 
						span.slash [
						span.center(name='attr_' + key title='@{' + key + '}')
						span.slash %]
				else
					label(data-i18n-title=key + ' score' title=key + ' score')
						input.text-align-left.short(data-i18n-placeholder='-' style='width:40%'  min=0 name='attr_' + key + '_score' placeholder='10' title='@{' + key + '_score' + '}' type='number' value=' ')
						span.slash [
						span.center(name='attr_' + key title='@{' + key + '}')
						span.slash %]
			h1(data-i18n='HP') HP
			label(data-i18n-title='enter hit points' title='enter hit points')
				span.center(name='attr_hit_points_max' title='@{' + key + '}')
				span.slash /
				input.text-align-left.short(data-i18n-placeholder='-' style='width:50%' name='attr_hit_points' placeholder='-' title='@{hit_points}' type='number' value='')
			h1(data-i18n='WP') WP
			label(data-i18n-title='enter willpower points' title='enter willpower points')
				span.center(name='attr_willpower_points_max' title='@{' + key + '}')
				span.slash /
				input.text-align-left.short(data-i18n-placeholder='-' style='width:50%' name='attr_willpower_points' placeholder='-' title='@{willpower_points}' type='number' value='')
			h1(data-i18n='SAN') SAN
			label(data-i18n-title='enter sanity points' title='enter sanity points')
				span.center(name='attr_sanity_points_max' title='@{' + key + '}')
				span.slash /
				input.text-align-left.short(data-i18n-placeholder='-' style='width:50%' name='attr_sanity_points' placeholder='-' title='@{willpower_points}' type='number' value='')
			h1(data-i18n='BP') BP
			label(data-i18n-title='enter breaking points' title='enter breaking point')
				span.center(name='attr_breaking_point_max' title='@{' + key + '}')
				span.slash /
				input.text-align-left.short(data-i18n-placeholder='-' style='width:50%' name='attr_breaking_point' placeholder='-' title='@{willpower_points}' type='number' value='')
			.grid.section.sanloss
				input.switchblock.none( name='attr_whatsanroll'  title='@{target_san_loss}' type='checkbox' value='target') 
				span.switch-a
					- const statRollValue = `@{gm_toggle} &{template:sanloss} {{type=^{@{san_type}}}} {{success=@{san_success}}}  {{failure=@{san_failure}}} {{roll1=[[@{san_success}]]}} {{roll2=[[@{san_failure}]]}}  {{hasminsan=[[@{has_san_success}]]}} {{hasmaxsan=[[@{has_san_failure}]]}}`;
					button(name='san loss roll' data-i18n-title='san loss roll' title='san loss roll' type='roll' value!=statRollValue)
						h1(data-i18n='SAN LOSS') SAN LOSS
				span.switch-b
					//without modifiers - const statRollValue2 = `@{gm_toggle} &{template:sanloss1} {{minloss=@{minsanloss}}} {{maxloss=@{maxsanloss}}} {{name=@{target|name} }} {{dice=[[1d100]]}} {{subheader=@{target|sanity_points}}} {{rating=[[@{target|sanity_points}]]}} {{type=^{@{san_type}}}} {{success=@{san_success}}}  {{failure=@{san_failure}}} {{rsuccess=[@{san_success}](~rsuccess)}} {{rfailure=[@{san_failure}](~rfailure)}}  {{hasminsan=[[@{has_san_success}]]}} {{hasmaxsan=[[@{has_san_failure}]]}}`;
					- const statRollValue2 = `@{gm_toggle} &{template:sanloss1} {{minloss=@{minsanloss}}} {{maxloss=@{maxsanloss}}} {{name=@{target|name} }} {{dice=[[1d100]]}} {{subheader=@{target|sanity_points}}}  {{modifier=[[?{Modifier|,0|+20%,20|+40%,40|-20%,-20|-40%,-40|custom (%),?{custom (%)}}]]}}  {{rating=[[@{target|sanity_points}+?{Modifier|,0|+20%,20|+40%,40|-20%,-20|-40%,-40|custom (%),?{custom (%)}}]]}} {{type=^{@{san_type}}}} {{success=@{san_success}}}  {{failure=@{san_failure}}} {{rsuccess=[@{san_success}](~rsuccess)}} {{rfailure=[@{san_failure}](~rfailure)}}  {{hasminsan=[[@{has_san_success}]]}} {{hasmaxsan=[[@{has_san_failure}]]}}`;
					button(name='san loss roll' data-i18n-title='san loss roll' title='san loss roll' type='roll' value!=statRollValue2)
						h1(data-i18n='SAN LOSS') SAN LOSS
					button.none(name='roll_rsuccess' type='roll' value='@{gm_toggle} &{template:damage} {{header=Success}} {{subheader=@{san_success}}} {{damage=[[@{san_success}+0]]}} ')
					button.none(name='roll_rfailure' type='roll' value='@{gm_toggle} &{template:damage} {{header=Failure}} {{subheader=@{san_failure}}} {{damage=[[@{san_failure}+0]]}} ')
				input.text-align-left(data-i18n-placeholder='0' name='attr_san_success' placeholder='0' title='@{san_success}' type='text' value='0') 
				input.text-align-left(name='attr_has_san_success'  type='hidden' value='1') 
				span.slash /
				input.text-align-left(data-i18n-placeholder='1' name='attr_san_failure' placeholder='1' title='@{san_failure}' type='text' value='1')
				input.text-align-left(name='attr_has_san_failure'  type='hidden' value='1') 
				input(name='attr_minsanloss' type='hidden' value='0')
				input(name='attr_maxsanloss' type='hidden' value='1')
				select(name='attr_san_type')
					optgroup(label='Sanity Type')
						option(data-i18n='unnatural' value='unnatural') unnatural
						option(data-i18n='violence' value='violence') violence
						option(data-i18n='helplessness' value='helplessness') helplessness
				input.center( name='attr_whatsanroll'  title='@{target_san_loss}' type='checkbox' value='target') 
				span.slash Target the selected token
			h1(data-i18n='armor') ARMOR
			label(data-i18n-title='enter armor text' title='enter armor text')
				input(data-i18n-placeholder='8 points of thick hide' name='attr_armor' placeholder='8 points of thick hide' title='@{armor}' type='text' value='')

			h1(data-i18n='skills') skills
			.repeating-container.skills
				.grid.section-header
					h2(data-i18n='skill') name
					h2(data-i18n='rank') skill %
					h2(data-i18n='roll') roll
				fieldset.repeating_skills
					.grid.section-skills.border-bottom
						//without modifiers - const npcSkillRollValue = `@{gm_toggle} &{template:rolls} {{header=@{name}}} {{subheader=@{rank}}} {{rating=[[@{rank}]]}} {{dice=[[1d100]]}}`;
						- const npcSkillRollValue = `@{gm_toggle} &{template:rolls} {{header=@{name}}} {{subheader=@{rank}}}  {{modifier=[[?{Modifier|,0|+20%,20|+40%,40|-20%,-20|-40%,-40|custom (%),?{custom (%)}}]]}}  {{rating=[[@{rank}+?{Modifier|,0|+20%,20|+40%,40|-20%,-20|-40%,-40|custom (%),?{custom (%)}}]]}} {{dice=[[1d100]]}}`;
						label(data-i18n-title='skill name' title='skill name')
							input.center(data-i18n-placeholder='skill name' name='attr_name' placeholder='skill name' title='@{repeating_skills_${x}_name}' type='text' value='')
						label(data-i18n-title='skill rank' title='skill rank')
							input(data-i18n-placeholder='0' name='attr_rank' title='@{repeating_skills_${x}_rank}' placeholder='0' type='number' value='')
						button.dicefontd10(data-i18n-title='skill roll' name='skill roll' title='skill roll' type='roll' value=npcSkillRollValue) k

			h1(data-i18n='attacks') attacks
			.repeating-container.attacks
				//- const attackAttrs = ['weapons', 'skill %',  'damage', 'notes']
				- const attackAttrs = ['weapons', 'skill %', 'base range', 'damage', 'armor piercing', 'lethality %', 'kill radius', 'ammo', 'notes']
				.grid.section-header
					each attack in attackAttrs
						if (attack==='weapons')
							h2(data-i18n='attack')='attack'
						else
							h2(data-i18n=attack)=attack
					h2(data-i18n='roll') roll
				fieldset.repeating_weapons
					.grid.section-weapons.border-bottom
						//without modifiers- const attackRollValue = `@{gm_toggle} &{template:rolls} {{name=@{name}}} {{header=@{weapons}}} {{subheader=@{skill_percent}}} {{rating=[[@{skill_percent}]]}} {{dice=[[1d100]]}} {{hasdamage=[[@{hasdamage}]]}} {{damage=^{damage} [@{damage}](~repeating_weapons_damage)}}  {{damage_critical=^{damage (×2)} [@{damage}](~repeating_weapons_damage_critical)}} {{haslethality=[[@{haslethality}]]}} {{lethality=^{lethality} [@{lethality_percent}%](~repeating_weapons_lethality)}} {{lethality_critical=^{lethality (×2)} [@{lethality_percent}%](~repeating_weapons_lethality_critical)}} {{AP=[[@{armor_piercing}+0]]}}`; 
						- const attackRollValue = `@{gm_toggle} &{template:rolls} {{name=@{name}}} {{header=@{weapons}}} {{subheader=@{skill_percent}}} {{modifier=[[?{Modifier|,0|+20%,20|+40%,40|-20%,-20|-40%,-40|custom (%),?{custom (%)}}]]}} {{rating=[[@{skill_percent}+?{Modifier|,0|+20%,20|+40%,40|-20%,-20|-40%,-40|custom (%),?{custom (%)}}]]}} {{dice=[[1d100]]}} {{hasdamage=[[@{hasdamage}]]}} {{damage=^{damage} [@{damage}](~repeating_weapons_damage)}}  {{damage_critical=^{damage (×2)} [@{damage}](~repeating_weapons_damage_critical)}} {{haslethality=[[@{haslethality}]]}} {{lethality=^{lethality} [@{lethality_percent}%](~repeating_weapons_lethality)}} {{lethality_critical=^{lethality (×2)} [@{lethality_percent}%](~repeating_weapons_lethality_critical)}} {{AP=[[@{armor_piercing}+0]]}}`; 
						each attack in attackAttrs
							- const attrName = attack.replace(' ', '_').replace('%', 'percent')
							- const type = attack.includes('%') || attack === 'ammo' ? 'number' : 'text';
							if (attrName==='lethality_percent')
								label(data-i18n-title=attack + ' input' title=attack + ' input')
									input(data-i18n-placeholder=attack name='attr_' + attrName placeholder=attack title='@{repeating_weapons_${x}_' + attrName + '}' type=type value='')
									input( name='attr_haslethality'  type='hidden' value='0')
							else if (attrName==='damage')
								label(data-i18n-title=attack + ' input' title=attack + ' input')
									input(data-i18n-placeholder=attack name='attr_' + attrName placeholder=attack title='@{repeating_weapons_${x}_' + attrName + '}' type=type value='')
									input(  name='attr_hasdamage'  type='hidden' value='0')
							else if (attrName==='weapons')
								label(data-i18n-title=attack + ' input' title=attack + ' input')
									input(data-i18n-placeholder='attack' name='attr_' + attrName placeholder='attack' title='@{repeating_weapons_${x}_' + attrName + '}' type=type value='')
							else
								label(data-i18n-title=attack + ' input' title=attack + ' input')
									input(data-i18n-placeholder=attack name='attr_' + attrName placeholder=attack title='@{repeating_weapons_${x}_' + attrName + '}' type=type value='')
						button.dicefontd10(name='weapon' type='roll' title='weapon roll' value=attackRollValue) k
						button.none(name='roll_damage' type='roll' value='@{gm_toggle} &{template:damage} {{header=@{weapons}}} {{subheader=@{damage}}} {{damage=[[@{damage}]]}} {{AP=[[@{armor_piercing}+0]]}}')
						button.none(name='roll_lethality' type='roll' value='@{gm_toggle} &{template:lethality} {{header=@{weapons}}} {{subheader=@{lethality_percent}}}{{lethality_rating=[[@{lethality_percent}]]}} {{lethality=[[1d100]]}} {{AP=[[@{armor_piercing}+0]]}}')
						button.none(name='roll_damage_critical' type='roll' value='@{gm_toggle} &{template:damage} {{header=@{weapons}}} {{subheader=@{damage}}} {{damage=[[(@{damage})*2]]}} {{AP=[[@{armor_piercing}+0]]}}')
						button.none(name='roll_lethality_critical' type='roll' value='@{gm_toggle} &{template:lethality_critical} {{header=@{weapons}}} {{subheader=@{lethality_percent}}} {{lethality_rating=[[@{lethality_percent}*2]]}} {{lethality=[[1d100]]}} {{AP=[[@{armor_piercing}+0]]}}')

			h1(data-i18n='other notes') other notes
			.repeating-container.notes
				.grid.section-header
					h2(data-i18n='name') name
					h2(data-i18n='notes') notes
				fieldset.repeating_other
					.grid.section.border-bottom
						label(data-i18n-title='other notes name' title='other notes name')
							input(data-i18n-placeholder='name' name='attr_name' placeholder='name' title='@{repeating_other_${x}_name}' type='text' value='')
						label(data-i18n-title='other notes' title='other notes')
							input(data-i18n-placeholder='notes' name='attr_notes' placeholder='notes' title='@{repeating_other_${x}_notes}' type='text' value='')
//- SKILL ROWS
